package classes.asset{	import asset.game.GameView;	import asset.map.MapView;	import asset.result.ResultView;		import classes.asset.check.CheckView;	import classes.asset.setting.SettingView;	import classes.myEvents.LanguageSelectEvent;		import flash.desktop.NativeApplication;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.SharedObject;	import flash.text.TextField;		import myEvents.ClearEvent;	import myEvents.MapSelectEvent;	import myEvents.SimpleButtonSelectEvent;		import org.libspark.betweenas3.BetweenAS3;	import org.libspark.betweenas3.easing.*;	import org.libspark.betweenas3.events.TweenEvent;	import org.libspark.betweenas3.tweens.IObjectTween;	import org.libspark.betweenas3.tweens.ITween;
		public class Wrap extends Sprite	{		private var mapView:MapView;		private var gameView:GameView;		private var resultView:ResultView;		private var settingView:SettingView;		private var _language:String = "English";				private var _landData:Object;				private var so:SharedObject;		private var na:NativeApplication;		private var info_txt:TextField;				private var hiOfNorthAmerica:uint;		private var hiOfSouthAmerica:uint;		private var hiOfEurope:uint;		private var hiOfAfrica:uint;		private var hiOfAsia:uint;		private var hiOfAustralia:uint;						private var hiScoreAry:Array;		private var checkView:JPPScrollbarKit_y;		private var tween:ITween;		private var clearView:DisplayObjectContainer;		private var nextView:DisplayObjectContainer;		private var gameInitFlag:Boolean = true;				public var mapPositionX:Number = 0;		public var tweenCompFlag:Boolean = false;				public function Wrap()		{			super();						hiScoreAry = [				hiOfNorthAmerica,				hiOfSouthAmerica,				hiOfEurope,				hiOfAfrica,				hiOfAsia,				hiOfAustralia			];						this.addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler, false, 0, true);						ScoreSet();			CreateMapView();		}				protected function addedToStageHandler(event:Event):void
		{			//(デバッグ用)
			info_txt = new TextField();			info_txt.width = stage.stageWidth;			info_txt.height = stage.stageHeight;			info_txt.mouseEnabled = false;			addChild(info_txt);
		}						private function CreateMapView():void		{			mapView = new MapView();			mapView.addEventListener(MapSelectEvent.SELECTED, MapSelectedHandler, false, 0, true);			mapView.addEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, setButtonHandler, false, 0, true);			addChild(mapView);		}				protected function setButtonHandler(event:SimpleButtonSelectEvent):void		{			mapView.removeEventListener(MapSelectEvent.SELECTED, MapSelectedHandler);			mapView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, setButtonHandler);			//mapViewのxを保存			saveMapPos();			CreateSettingView();						trans("left", settingView, mapView);		}				private function MapSelectedHandler(event:MapSelectEvent):void		{			mapView.removeEventListener(MapSelectEvent.SELECTED, MapSelectedHandler);			mapView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, setButtonHandler);			_landData = event.gd;			//mapViewのxを保存			saveMapPos();						//trace(mapView.map.content.contentBody.x);			CreateGameView(false);			trans("right", gameView, mapView);		}				private function saveMapPos():void
		{
			mapPositionX = mapView.map.content.contentBody.x;
		}				private function CreateSettingView():void
		{
			settingView = new SettingView(_language);			settingView.addEventListener(LanguageSelectEvent.LANG_SELECTED, LanguageSelectHandler, false, 0, true);			settingView.addEventListener(LanguageSelectEvent.LIST_NAME, countryListButtonSelectHandler, false, 0, true);			settingView.addEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, settingViewBackButtonClickHandler, false, 0, true);			settingView.x = -stage.stageWidth;			addChild(settingView);
		}				protected function LanguageSelectHandler(event:LanguageSelectEvent):void		{			_language = event.str;		}				protected function countryListButtonSelectHandler(event:LanguageSelectEvent):void		{			settingView.removeEventListener(LanguageSelectEvent.LANG_SELECTED, LanguageSelectHandler);			settingView.removeEventListener(LanguageSelectEvent.LIST_NAME, countryListButtonSelectHandler);			settingView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, settingViewBackButtonClickHandler);			CreateCheckView(event.str);			trans("left", checkView, settingView);		}				protected function settingViewBackButtonClickHandler(event:SimpleButtonSelectEvent):void		{			settingView.removeEventListener(LanguageSelectEvent.LANG_SELECTED, LanguageSelectHandler);			settingView.removeEventListener(LanguageSelectEvent.LIST_NAME, countryListButtonSelectHandler);			settingView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, settingViewBackButtonClickHandler);			CreateMapView();			trans("right", mapView, settingView);		}
				private function CreateCheckView(landName:String):void
		{
			checkView = new JPPScrollbarKit_y(landName, _language);			checkView.cacheAsBitmap = true;			checkView.x = -stage.stageWidth*2;			checkView.addEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, checkCloseHandler, false, 0, true);			addChild(checkView);
		}				protected function checkCloseHandler(event:SimpleButtonSelectEvent):void
		{			var c:CheckView = checkView.content.getChildByName("contentBody") as CheckView;			//trace(c.webview);			if(c.webview){				//ブラウザが表示されていたら				c.webview.dispose();				c.webview = null;			}else{				checkView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, checkCloseHandler);				CreateSettingView();				trans("right", settingView, checkView);			}
		}				protected function CreateGameView(retry:Boolean=false):void{			if(!retry){				gameView = new GameView(_landData, _language);				gameView.x = stage.stageWidth;				addChild(gameView);			}else{				//retry用				gameView.alpha = 1;				gameView.resetGame();				gameView.createCountView(true);			}			gameView.addEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, poseSelectHandler, false, 0, true);			gameView.addEventListener(ClearEvent.CLEAR, CleraHandler, false, 0, true);		}				protected function poseSelectHandler(event:SimpleButtonSelectEvent):void		{			gameView.poseClick();			if(event.getName == "poseButton"){				//poseClick			}						if(event.getName == "_retryButton"){				//retry				gameView.timerBar.TimerStop();				gameView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, poseSelectHandler);				gameView.removeEventListener(ClearEvent.CLEAR, CleraHandler);				//gameViewが消えてからクリエイトする				gameView.addEventListener("gameHided", gameHidedHandler, false, 0, true);				gameView.gameHide();							}			if(event.getName == "_returnButton"){				//mapview				gameView.timerBar.TimerStop();				gameView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, poseSelectHandler);				gameView.removeEventListener(ClearEvent.CLEAR, CleraHandler);				//poseViewが消えてからクリエイトする				gameView.poseView.addEventListener("poseHided", poseHidedHandler, false, 0, true);			}		}				protected function gameHidedHandler(event:Event):void
		{			gameView.removeEventListener("gameHided", gameHidedHandler);
			CreateGameView(true);
		}				protected function poseHidedHandler(event:Event):void		{			gameView.poseView.removeEventListener("poseHided", poseHidedHandler);			CreateMapView();			trans("left", mapView, gameView);		}				private function CleraHandler(event:ClearEvent):void		{			gameView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, poseSelectHandler);			gameView.removeEventListener(ClearEvent.CLEAR, CleraHandler);						var score:int = (event.maruCount*3)-(event.batuCount*1);			if(score<0){				score = 0;			}			var max:int = _landData._max * 3;			var parcentScore:Number = (100/max) * score;			parcentScore = uint(parcentScore);						if(parcentScore > hiScoreAry[_landData._id]){				hiScoreAry[_landData._id] = parcentScore;			}						resultView = new ResultView(parcentScore, hiScoreAry[_landData._id], event.flag);			resultView.addEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, resultSelectedHandler, false, 0, true);			resultView.x = stage.stageWidth;			resultView.name = "resultView";			addChild(resultView);		}				private function resultSelectedHandler(event:SimpleButtonSelectEvent):void		{			resultView.removeEventListener(SimpleButtonSelectEvent.SIMPLE_SELECTED, resultSelectedHandler);			resultView.hide();			if(event.getName == "_retryButton"){				//リトライ				//gameViewが消えてからクリエイトする				gameView.addEventListener("gameHided", gameHidedHandler2, false, 0, true);				gameView.gameHide();			}else{				//マップ画面				resultView.addEventListener("resultViewHide", resultViewHidedHandler, false, 0, true);			}		}				protected function gameHidedHandler2(event:Event):void		{			gameView.removeEventListener("gameHided", gameHidedHandler2);			removeResult();			CreateGameView(true);			gameInitFlag = false;		}				protected function resultViewHidedHandler(event:Event):void
		{			resultView.removeEventListener("resultViewHide", resultViewHidedHandler);			removeResult();
			CreateMapView();			trans("left", mapView, gameView);
		}								protected function removeResult():void
		{			if(this.getChildByName("resultView")){
				removeChild(resultView);				resultView = null;			}
		}				private function trans(direction:String, nView:DisplayObjectContainer=null, cView:DisplayObjectContainer=null):void		{			tweenCompFlag = false;			if(cView!=null){				mouseFalse(cView);				clearView = cView;			}			if(nView!=null){				mouseFalse(nView);				nextView = nView;			}						if(tween!=null){				tween.stop();				tween = null;			}						if(direction == "right"){				//右				tween = BetweenAS3.to(this, {x:x - (stage.stageWidth)}, 0.5, Cubic.easeIn);			}else{				//左				tween = BetweenAS3.to(this, {x:x + (stage.stageWidth)}, 0.5, Cubic.easeIn);			}			tween.addEventListener(TweenEvent.COMPLETE, tweenCompHandler, false, 0, true);			tween.play();		}				protected function tweenCompHandler(event:TweenEvent):void{			tweenCompFlag = true;			tween.removeEventListener(TweenEvent.COMPLETE, tweenCompHandler);			tween.stop();			tween = null;						if(clearView!=null){				removeChild(clearView);			}			clearView = null;			mouseTrue(nextView);						if(nextView is GameView && gameInitFlag == true){				gameView.Init();			}			//基本true			gameInitFlag = true;		}				private function mouseTrue(d:DisplayObjectContainer):void
		{
			d.mouseEnabled = true;			d.mouseChildren = true;
		}				private function mouseFalse(d:DisplayObjectContainer):void		{			d.mouseEnabled = false;			d.mouseChildren = false;		}				private function ScoreSet():void		{			//sharedObject setting			so = SharedObject.getLocal("highScore");			//_hiscore setting						if(so.data.ary == undefined){				for(var i:uint = 0; i < hiScoreAry.length; i++){					hiScoreAry[i] = 0;				}			}else{				var a:Array = so.data.ary;				for(var j:uint = 0; j < hiScoreAry.length; j++){					if(a[j] != undefined){						hiScoreAry[j] = a[j];					}else{						hiScoreAry[j] = 0;					}				}			}			//log(String(so.data.ary));			na = NativeApplication.nativeApplication;			na.addEventListener(Event.ACTIVATE, onApplicationActivate, false, 0, true);			na.addEventListener(Event.DEACTIVATE, onApplicationDeactivate, false, 0, true);			//log(hiScoreAry);		}				private function onApplicationActivate(evt:Event):void		{			//log("前面に戻った");			//log(so.data.ary);			stage.frameRate = 24;		}				private function onApplicationDeactivate(evt:Event):void		{			// ここでデータの保存処理			onSave();			stage.frameRate = 1;			// アプリケーションを終了する			na.exit();		}				private function onSave():void		{			so.data.ary = hiScoreAry;			so.flush();		}						/*		private function log(txt):void		{			info_txt.appendText(txt + "\n");		}		*/			}}