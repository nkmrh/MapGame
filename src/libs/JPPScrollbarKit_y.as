package {	import caurina.transitions.Tweener;		import classes.asset.SimpleButton;	import classes.asset.check.CheckView;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		import net.alumican.as3.ui.justputplay.events.JPPScrollbarEvent;	import net.alumican.as3.ui.justputplay.scrollbars.JPPScrollbar;
		/**	 * JPPScrollbarKit.as	 *	 * <p>ActionScript3.0で簡単に設置できるスクロールバー. </p>	 * <p>適切な階層構造を持ったDisplayObjectにリンケージすることで, 簡単にスクロールバーを設置することができます. </p>	 * 	 * @author alumican.net<Yukiya Okuda>	 * @link http://alumican.net	 */		public class JPPScrollbarKit_y extends MovieClip {				//==========================================================================		// VARIABLES		//==========================================================================				/**		 * <p>スクロールバークラスです. </p>		 */		private var _scrollbar:JPPScrollbar;				//==========================================================================		// STAGE INSTANCES		//==========================================================================				/**		 * <p>上方向アローボタンとしてステージに配置してあるMovieClipです. </p>		 */	//	public var arrowUp:MovieClip;				/**		 * <p>下方向アローボタンとしてステージに配置してあるMovieClipです. </p>		 */	//	public var arrowDown:MovieClip;				/**		 * <p>slider(スライダー), base(スライダーの可動範囲を表すオブジェクト)を内包した, ステージに配置してあるMovieClipです. </p>		 */		public var scrollBox:MovieClip;				/**		 * <p>contentBody(スクロール対象), contentMask(マスクオブジェクト)を内包した, ステージに配置してあるMovieClipです. </p>		 */		public var content:MovieClip;				public var header:MovieClip;		public var backButton:SimpleButton;						//==========================================================================		// CONSTRUCTOR		//==========================================================================				/**		 * <p>コンストラクタです. </p>		 */		public function JPPScrollbarKit_y(landName:String, lng:String):void {			header.field.text = landName;			var body:CheckView = new CheckView(landName, lng);			body.name = "contentBody";			content.addChild(body);			body.addEventListener("checkPannelSetComplete", _checkPannel, false, 0, true);						backButton = new SimpleButton("", "arrow", 0.2, 0.4);			backButton.name = "backButton";			backButton.x = 271;			backButton.y = 2;			addChild(backButton);		}				public function _checkPannel(e:Event):void{			e.target.removeEventListener("checkPannelSetComplete", _checkPannel);			_initialize();		}				//==========================================================================		// METHODS		//==========================================================================				/**		 * <p>初期化関数です. </p>		 * <p>ステージに配置されたときに呼び出されます. </p>		 * @param e <p>Event</p>		 */		private function _initialize():void {			//======================================================================			//ステージ上の各パーツ			var body:CheckView   = content.getChildByName("contentBody") as CheckView;			var mask:MovieClip   = content.contentMask;			body.mask = mask;			mask.visible = false;			var slider:MovieClip = scrollBox.slider;			var base:MovieClip   = scrollBox.base;						//======================================================================			//コンテンツの上限値, 下限値			var upperBound:Number = body.y;			//上下にオーバーシュート時に見える絵を上下 50px づつ書き足しています. 調整するためにcontent.height に -50 * 2 します。			var lowerBound:Number = body.y - ((content.height - 50 * 2 ) - mask.height);						var target:Object = body;			var key:String = "y";						//======================================================================			//スクロールバーインスタンスの生成			_scrollbar = new JPPScrollbar(stage);						//stageを渡します. 			//コンストラクタでstageを渡さない場合はJPPScrollbarのstageプロパティにstageを代入しておく必要があります.		//	_scrollbar.stage = stage;						//======================================================================			//パーツのバインド		//	_scrollbar.up     = arrowUp;   //上向きアローボタンとしてバインドするインスタンスを設定します.		//	_scrollbar.down   = arrowDown; //下向きアローボタンとしてバインドするインスタンスを設定します.			_scrollbar.base   = base;      //スクロールエリアとしてバインドするインスタンスを設定します.			_scrollbar.slider = slider;    //スライダとしてバインドするインスタンスを設定します.						//======================================================================			//スクロールバーの初期化			_scrollbar.setup(				target,      //スクロール対象となるオブジェクトです．				key,         //スクロール対象コンテンツが保持している, スクロールによって実際に変化させたいプロパティ名を表します.				body.height, //スクロール対象コンテンツの総計サイズを設定します.				mask.height, //スクロール対象コンテンツの表示部分のサイズを設定します.				upperBound,  //スライダーが上限に達したときの変化対象プロパティの値を設定します.				lowerBound   //スライダーが下限に達したときの変化対象プロパティの値を設定します.			);						//後から値を変更できます．		//	_scrollbar.upperBound;  //スライダーが上限に達したときの変化対象プロパティの値を設定します.		//	_scrollbar.lowerBound;  //スライダーが下限に達したときの変化対象プロパティの値を設定します.		//	_scrollbar.contentSize; //スクロール対象コンテンツの総計サイズを設定します.			                        //このプロパティは伸縮スライドバーを使用する場合のスライドバーのサイズ計算に用いられます．		//	_scrollbar.maskSize;    //スクロール対象コンテンツの表示部分のサイズを設定します.			                        //このプロパティは伸縮スライドバーを使用する場合のスライドバーのサイズ計算に用いられます.						_scrollbar.base.visible   = false;						//======================================================================			//コンテンツサイズがマスクサイズに満たない場合の処理			if (_scrollbar.isUnderFlow) {		//		_scrollbar.up.visible     = false;		//		_scrollbar.down.visible   = false;				_scrollbar.slider.visible = false;		//		_scrollbar.base.visible   = false;		//		_scrollbar.baseEnabled    = false;			}						//======================================================================			//各種オプション一覧						//----------------------------------------------------------------------			//スクロールの基本動作						//減速スクロールを使用するかどうかを設定します.			//使用する場合にはtrueを設定します.		//	_scrollbar.useSmoothScroll = false;						//減速スクロールを使用する場合の, 減速の緩やかさを設定します.			//1以上の数値を設定し, 数値が大きくなるほど緩やかに戻るようになります.		//	_scrollbar.smoothScrollEasing = 1;						//----------------------------------------------------------------------			//スライダー						//コンテンツ量に応じて伸縮するスライダーを使用するかどうかを設定します.			_scrollbar.useFlexibleSlider = true;						//コンテンツ量に応じて伸縮するスライダーを使用する場合, スライダーの最小サイズをピクセル値で設定します.		//	_scrollbar.minSliderHeight = 10;						//スライダーの高さを常に0として扱うかどうかを設定します.		//	_scrollbar.useIgnoreSliderHeight = true;						//----------------------------------------------------------------------			//スライダーおよび対象プロパティの吸着						//スクロール完了時にスライダーをピクセルに吸着させるかどうかを設定します.			_scrollbar.usePixelFittingSlider = true;						//スクロール完了時に対象プロパティを整数値に吸着させるかどうかを設定します.			_scrollbar.usePixelFittingContent = false;						//----------------------------------------------------------------------			//スクロールバーの有効化/無効化						//各パーツの有効/無効を切り替えます.			//ボタンを有効化させる場合はtrueを設定します.			//mouseChildrenプロパティは変更されません.			//このプロパティは書き込み専用です.			//初期設定時にtrueが設定されます. 					//	_scrollbar.buttonEnabled = true; //アローボタン, スライダー, ベースボタンの有効/無効を一括して切り替えます.		//	_scrollbar.upEnabled     = true; //上方向アローボタン		//	_scrollbar.downEnabled   = true; //下方向アローボタン			_scrollbar.sliderEnabled = false; //スライダー		//	_scrollbar.baseEnabled   = true; //スクロールエリア						//----------------------------------------------------------------------			//マウスホイールの使用/不使用						_scrollbar.useMouseWheel = false;						//----------------------------------------------------------------------			//アローボタンのスクロール						//アローボタンを1回クリックしたときのスクロール量を設定します.			//scrollUp(), scrollDown()メソッドを呼び出した際のスクロール量もこの値に従います.		//	_scrollbar.arrowScrollAmount = 200;						//continuousArrowScrollAmountおよびarrowScrollAmountに使用するスクロール単位を切り替えます.			//trueの場合はスクロール量をコンテンツ全体に対する割合で設定します(0より大きく1以下の数値).			//falseの場合はスクロール量をピクセル数で設定します(0以上の数値).		//	_scrollbar.useArrowScrollUsingRatio = true;						//アローボタンを押し続けた場合に, 連続スクロールを発生させるかどうかを切り替えます.		//	_scrollbar.useContinuousArrowScroll = false;						//アローボタンを押し続けた場合に発生する連続スクロールを使用する場合, 連続スクロールが始まるまでの時間(ミリ秒)を設定します．		//	_scrollbar.continuousArrowScrollInterval = 300;						//アローボタンを押し続けた場合に発生する連続スクロールを使用する場合, 毎フレームのスクロール量を設定します.		//	_scrollbar.continuousArrowScrollAmount = 10;						//----------------------------------------------------------------------			//オーバーシュート演出						//オーバーシュート(iPhoneのように, 端まで行くとちょっと行き過ぎて戻る演出)を加えるかどうかを切り替えます.			_scrollbar.useOvershoot = true;						//オーバーシュートを使用する場合, オーバーシュートの最大行き過ぎ量をピクセル数で設定します.			_scrollbar.overshootPixels = mask.height / 8;						//オーバーシュートを使用する場合, オーバーシュートから本来のスクロール座標へ戻る際の緩やかさを設定します.			//1以上の数値を設定し, 数値が大きくなるほど緩やかに戻るようになります.			_scrollbar.overshootEasing = 3;						//オーバーシュートを使用する場合, オーバーシュート時にスクロールバーが縮む演出を加えるかどうかを切り替えます.			_scrollbar.useOvershootDeformationSlider = true;						//----------------------------------------------------------------------			//オートスクロール						//オートスクロールの強制力を切り替えます.			//trueの場合は, 何らかのユーザーアクションによるスクロールが発生した時点でオートスクロールを終了します.			//falseの場合は, ユーザーアクションによるスクロールが優先されますが, ユーザーアクションが終了するとオートスクロールは再開します.		//	_scrollbar.useAutoScrollCancelable = false;						//オートスクロールに使用するスクロール単位を切り替えます.			//trueの場合はスクロール量をコンテンツ全体に対する割合で設定します(0より大きく1以下の数値).			//falseの場合はスクロール量をピクセル数で設定します(0以上の数値).		//	_scrollbar.useAutoScrollUsingRatio = true;						//オートスクロールの毎フレームのスクロール量を設定します.		//	_scrollbar.autoScrollAmount = 10;						//======================================================================			//メソッド一覧						//arrowScrollAmountプロパティに設定された量だけコンテンツをスクロールさせる関数です. スライダーは上方向へと移動します.		//	_scrollbar.scrollUp();						//arrowScrollAmountプロパティに設定された量だけコンテンツをスクロールさせる関数です. スライダーは下方向へと移動します.		//	_scrollbar.scrollDown();						//スクロール位置を指定しスクロールを実行する関数です.		//	_scrollbar.scrollByRelativeRatio(); //相対位置にスクロール．スクロール値の指定には割合を指定します. 第2引数で現在値からの相対位置と最終到達位置からの相対位置を切り替えられます．		//	_scrollbar.scrollByAbsoluteRatio(); //絶対位置にスクロール．スクロール値の指定には割合を指定します.		//	_scrollbar.scrollByRelativePixel(); //相対位置にスクロール．スクロール値の指定にはピクセルを指定します. 第2引数で現在値からの相対位置と最終到達位置からの相対位置を切り替えられます．		//	_scrollbar.scrollByAbsolutePixel(); //絶対位置にスクロール．スクロール値の指定にはピクセルを指定します. 						//オートスクロールを開始します. 第2引数でスクロール方向を指定します．		//	_scrollbar.startAutoScroll();						//オートスクロールを停止します.		//	_scrollbar.stopAutoScroll();						//======================================================================			//読み取り専用プロパティ一覧					//	_scrollbar.isUpPressed;         //上方向アローボタンが現在押下されているかどうかを取得します．		//	_scrollbar.isDownPressed;       //下方向アローボタンが現在押下されているかどうかを取得します・		//	_scrollbar.isBasePressed;       //スクロールエリアが現在押下されているかどうかを取得します．		//	_scrollbar.isSliderPressed;     //スライダーが現在押下されているかどうかを取得します．		//	_scrollbar.isOverFlow;          //contentSizeがmaskSizeよりも大きい場合にtrueを返します.		//	_scrollbar.isUnderFlow;         //contentSizeがmaskSize以下の場合にtrueを返します.		//	_scrollbar.isScrolling;         //減速スクロールを使用する場合, 現在スクロールが進行中であるかどうかを取得します.		//	_scrollbar.targetScroll;        //減速スクロールを使用する場合, スクロール完了時に対象プロパティが到達する目標値を表します.		//	_scrollbar.sliderHeight;        //useOvershootDeformationSlider=true時のオーバーシュート演出によって変形していないときのスライダーの高さを取得します.		//	_scrollbar.isOvershooting;      //現在オーバーシュートをしている場合はtrueを返します.		//	_scrollbar.isAutoScrolling;     //現在オートスクロールを実行中である場合はtrueを返します.		//	_scrollbar.autoScrollDirection; //実行中のオートスクロールの方向を取得します. trueの場合は下方向, falseの場合は上方向へスクロールしています.																		//======================================================================			//イベント一覧						//スクロール開始時に呼び出されます．		//	_scrollbar.addEventListener(JPPScrollbarEvent.SCROLL_START   , function(e:JPPScrollbarEvent):void { trace("scroll start");    } );						//スクロール進捗時に呼び出されます．		//	_scrollbar.addEventListener(JPPScrollbarEvent.SCROLL_PROGRESS, function(e:JPPScrollbarEvent):void { trace("scroll progress"); } );						//スクロール完了時に呼び出されます．		//	_scrollbar.addEventListener(JPPScrollbarEvent.SCROLL_COMPLETE, function(e:JPPScrollbarEvent):void { trace("scroll complete"); } );																		//スクロールバー、今回は動いた時だけ出る。とりあえず見えないようにしておく			slider.alpha = 0;						//スクロールバーの上下の丸めがつぶれないようにする			slider.scale9Grid = new Rectangle(1, 2.5, 1, 95);						//ドラッグ開始ハンドラの登録			addEventListener(MouseEvent.MOUSE_DOWN, _startDragHandler, false, 0, true);		}				//フラグ		private var _draggingFlag:Boolean  = false;		private var _scrollingFlag:Boolean = false;				//スライダーの状態		private var _isSliderVisible:Boolean = false;				//前回のマウス座標		private var _pastMouseY:int;		private var _velocityY:int;						/**		 * ドラッグ開始ハンドラ		 * @param	e		 */		private function _startDragHandler(e:MouseEvent):void {			removeEventListener(MouseEvent.MOUSE_DOWN, _startDragHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, _stopDragHandler, false, 0, true);						//監視開始			addEventListener(Event.ENTER_FRAME, _observeHandler, false, 0, true);			_scrollbar.addEventListener(JPPScrollbarEvent.SCROLL_START   , _startScrollHandler, false, 0, true);			_scrollbar.addEventListener(JPPScrollbarEvent.SCROLL_COMPLETE, _stopScrollHandler, false, 0, true);						//ドラッグ前処理			_scrollbar.smoothScrollEasing = 2;			_pastMouseY = mouseY;						stage.addEventListener(MouseEvent.MOUSE_MOVE, _moveDragHandler, false, 0, true);		}				/**		 * ドラッグ検出ハンドラ		 * @param	e		 */		private function _moveDragHandler(e:MouseEvent):void {			_draggingFlag = true;						//マウスの動きの差分を計算する			_velocityY = mouseY - _pastMouseY;						//ドラッグ中の処理			_scrollbar.scrollByRelativePixel(_velocityY);						//次の計算のために現在のマウス位置を保持			_pastMouseY = mouseY;		}				/**		 * ドラッグ終了ハンドラ		 * @param	e		 */		private function _stopDragHandler(e:MouseEvent):void {			addEventListener(MouseEvent.MOUSE_DOWN, _startDragHandler, false, 0, true);			stage.removeEventListener(MouseEvent.MOUSE_UP, _stopDragHandler);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, _moveDragHandler);						//ドラッグ操作をしていた場合慣性を働かせる			if ( _draggingFlag ) {				_scrollbar.smoothScrollEasing = 6;				_scrollbar.scrollByRelativePixel(_velocityY * 7);			}						_draggingFlag = false;		}				/**		 * スクロール開始ハンドラ		 * @param	e		 */		private function _startScrollHandler(e:JPPScrollbarEvent):void {			_scrollingFlag = true;		}				/**		 * スクロール完了ハンドラ		 * @param	e		 */		private function _stopScrollHandler(e:JPPScrollbarEvent):void {			_scrollingFlag = false;		}				/**		 * 毎フレーム，マウスの動きとスクロール状況を監視する		 * @param	e		 */		private function _observeHandler(e:Event):void {			//スライダーを表示する			if (!_isSliderVisible && (_draggingFlag || _scrollingFlag)) {				_isSliderVisible = true;				_showSlider();			}						//スライダーを非表示にする			if (_isSliderVisible && (!_draggingFlag && !_scrollingFlag)) {				_isSliderVisible = false;				_hideSlider();								//監視終了				removeEventListener(Event.ENTER_FRAME, _observeHandler);				_scrollbar.removeEventListener(JPPScrollbarEvent.SCROLL_START   , _startScrollHandler);				_scrollbar.removeEventListener(JPPScrollbarEvent.SCROLL_COMPLETE, _stopScrollHandler);			}		}				/**		 * スライダーを表示する		 */		private function _showSlider():void {			var slider:DisplayObject = _scrollbar.slider;						Tweener.removeTweens(slider);			Tweener.addTween(slider, {				alpha:1,				time:0.3,				transition:"linear"			});		}				/**		 * スライダーを隠す		 */		private function _hideSlider():void {			var slider:DisplayObject = _scrollbar.slider;						Tweener.removeTweens(slider);			Tweener.addTween(slider, {				alpha:0,				time:0.5,				transition:"linear"			});		}	}}